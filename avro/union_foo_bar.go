// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionFooBarTypeEnum int

const (
	UnionFooBarTypeEnumFoo UnionFooBarTypeEnum = 0

	UnionFooBarTypeEnumBar UnionFooBarTypeEnum = 1
)

type UnionFooBar struct {
	Foo       *Foo
	Bar       *Bar
	UnionType UnionFooBarTypeEnum
}

func writeUnionFooBar(r *UnionFooBar, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionFooBarTypeEnumFoo:
		return writeFoo(r.Foo, w)
	case UnionFooBarTypeEnumBar:
		return writeBar(r.Bar, w)
	}
	return fmt.Errorf("invalid value for *UnionFooBar")
}

func NewUnionFooBar() *UnionFooBar {
	return &UnionFooBar{}
}

func (_ *UnionFooBar) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionFooBar) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionFooBar) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionFooBar) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionFooBar) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionFooBar) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionFooBar) SetLong(v int64) {
	r.UnionType = (UnionFooBarTypeEnum)(v)
}
func (r *UnionFooBar) Get(i int) types.Field {
	switch i {
	case 0:
		r.Foo = NewFoo()
		return r.Foo
	case 1:
		r.Bar = NewBar()
		return r.Bar
	}
	panic("Unknown field index")
}
func (_ *UnionFooBar) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionFooBar) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionFooBar) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionFooBar) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionFooBar) Finalize()                        {}

func (r *UnionFooBar) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionFooBarTypeEnumFoo:
		return json.Marshal(map[string]interface{}{"foo": r.Foo})
	case UnionFooBarTypeEnumBar:
		return json.Marshal(map[string]interface{}{"bar": r.Bar})
	}
	return nil, fmt.Errorf("invalid value for *UnionFooBar")
}

func (r *UnionFooBar) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["foo"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.Foo)
	}
	if value, ok := fields["bar"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Bar)
	}
	return fmt.Errorf("invalid value for *UnionFooBar")
}
